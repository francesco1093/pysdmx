:py:mod:`PYTHON.src.smdx_client`
================================

.. py:module:: PYTHON.src.smdx_client


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   PYTHON.src.smdx_client.get_providers
   PYTHON.src.smdx_client.get_dsd_identifier
   PYTHON.src.smdx_client.get_flows
   PYTHON.src.smdx_client.get_dimensions
   PYTHON.src.smdx_client.get_codes
   PYTHON.src.smdx_client.get_timeseries
   PYTHON.src.smdx_client.get_timeseries_table
   PYTHON.src.smdx_client.get_timeseries_revisions



.. py:function:: get_providers() -> Dict[str, str]

   Extract the list of available Data Providers.

   This function is used to query the list of currently available data providers.


   :returns: dict-like object where keys are words and values are counts.
   :rtype: Dict[str, str]

   .. rubric:: Examples

   >>> get_providers()


.. py:function:: get_dsd_identifier(provider: str, dataflow: str) -> str

   Extracts the dsd identifier of a DataFlow.

   This function is used to retrieve the name of the keyfamily of the input dataflow.

   :param provider: Name of the provider.
   :type provider: str
   :param dataflow: Identifier of the dataflow.
   :type dataflow: str

   :returns: name of the keyfamily of the input dataflow.
   :rtype: str

   .. rubric:: Examples

   >>> id = get_dsd_identifier('ECB','EXR')


.. py:function:: get_flows(provider: str, pattern='') -> Dict[str, str]

   Extract the list of DataFlows of a provider.

   This function is used to query the list of dataflows of the provider. A matching pattern can be provided, if needed.

   :param provider: Name of the provider.
   :type provider: str
   :param pattern: Pattern to match against the dataflow id or description. If a pattern is not provided, all dataflows are returned.
   :type pattern: str

   :returns: dict-like object where keys are codes and values are descriptions.
   :rtype: Dict[str, str]

   .. rubric:: Examples

   >>> ## get all flows from ECB
   >>> flows = get_flows('ECB')
   >>> ## get all flows that contain the 'EXR
   >>> flows = get_flows('ECB','*EXR*')


.. py:function:: get_dimensions(provider: str, dataflow: str) -> Dict[str, str]

   Extract the dimensions of a DataFlow.

   This function is used to retrieve the list of dimensions of the input dataflow

   :param provider: Name of the provider.
   :type provider: str
   :param dataflow: Identifier of the dataflow.
   :type dataflow: str

   :returns: dict-like object where keys are dimension ids and values are their descriptions.
   :rtype: Dict[str, str]

   .. rubric:: Examples

   >>> dims = get_dimensions('ECB','EXR')


.. py:function:: get_codes(provider, dataflow, dimension) -> Dict[str, str]

   Extract the codes relative to a specific dimension.

   This function is used to retrieve the list of codes of the input dimension

   :param provider: Name of the provider.
   :type provider: str
   :param dataflow: Identifier of the dataflow.
   :type dataflow: str
   :param dimension: Identifier of the dimension.
   :type dimension: str

   :returns: dict-like object where keys are code ids and values are their descriptions.
   :rtype: Dict[str, str]

   .. rubric:: Examples

   >>> codes = get_codes('ECB','EXR','FREQ')


.. py:function:: get_timeseries(provider, id='', start='', end='', dataflow='', filter='')

   Extract a list of time series.

   This function is used to extract a list of time series identified by the parameters provided in input.

   :param provider: Name of the provider.
   :type provider: str
   :param id: Timeseries key
   :type id: str
   :param dataflow: Identifier of the dataflow.
   :type dataflow: str
   :param filter: Filter to be applied.
   :type filter: str

   :returns: dict-like object where keys are code ids and values are their descriptions.
   :rtype: Dict[str, str]

   .. rubric:: Examples

   >>> codes = get_codes('ECB','EXR','FREQ')


.. py:function:: get_timeseries_table(provider, id='', start='', end='', dataflow='', filter='')


.. py:function:: get_timeseries_revisions(provider, id='', start='', end='', updated_after='', include_history=True)


